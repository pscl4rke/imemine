
#                                                         vim:ft=python:
#======================================================================#
#               PYTHON INTERACTIVE SHELL STARTUP SCRIPT                #
#======================================================================#


#       A large part of this script has been shamelessly stolen
#       from:
#
#           http://igotgenes.blogspot.co.uk/2009/01/tab-completion-and-history-in-python.html


import atexit
import os.path

try:
   import readline
except ImportError:
   pass
else:
   import rlcompleter

   class IrlCompleter(rlcompleter.Completer):
       """
       This class enables a "tab" insertion if there's no text for
       completion.

       The default "tab" is four spaces. You can initialize with '\t' as
       the tab if you wish to use a genuine tab.

       """

       def __init__(self, tab='    '):
           self.tab = tab
           rlcompleter.Completer.__init__(self)


       def complete(self, text, state):
           if text == '':
               readline.insert_text(self.tab)
               return None
           else:
               return rlcompleter.Completer.complete(self,text,state)


   #you could change this line to bind another key instead tab.
   readline.parse_and_bind('tab: complete')
   readline.set_completer(IrlCompleter().complete)


# Restore our command-line history, and save it when Python exits.
history_path = os.path.expanduser('~/.pyhistory')
if os.path.isfile(history_path):
   readline.read_history_file(history_path)
atexit.register(lambda x=history_path: readline.write_history_file(x))


# All this is my fault:

def _red(msg):
    return "\033[31m%s\033[0m" % msg
def _green(msg):
    return "\033[32m%s\033[0m" % msg
def _yellow(msg):
    return "\033[33m%s\033[0m" % msg
def _blue(msg):
    return "\033[34m%s\033[0m" % msg

import sys
import traceback
def errorhook(type_, value, tb):
    for chunk in traceback.format_exception(type_, value, tb):
        if chunk == "Traceback (most recent call last):\n":
            sys.stderr.write(_red(chunk))
        elif chunk.startswith("\n"): # exception chaining
            sys.stderr.write(_blue(chunk))
        elif chunk.startswith(" "):
            for line in chunk.splitlines():
                if line.startswith("    "): # code snippet
                    sys.stderr.write(line + "\n")
                else: # filename etc
                    sys.stderr.write(_yellow(line + "\n"))
        elif chunk.split()[0].endswith(":"): # exception types
            sys.stderr.write(_red(chunk))
        else:
            sys.stderr.write(_green(chunk)) # should never happen
sys.excepthook = errorhook
