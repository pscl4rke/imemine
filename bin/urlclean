#!/usr/bin/python3
#======================================================================#
# URL CLEANER                                    (c) 2016 P. S. Clarke #
#======================================================================#


# Rewrite URLs if necessary to strip out things.  Primarily to
# prevent too much identifying information from leaking out.


import unittest
import urllib.parse
import sys


def clean_query(original):
    pairs = []
    for key, value in urllib.parse.parse_qsl(original):
        if key.startswith("utm_"):
            continue
        if key == "ftag":
            continue
        pairs.append((key, value))
    return urllib.parse.urlencode(pairs)


def clean(original):
    url = urllib.parse.urlparse(original.strip().lstrip('+').replace("\n+", ""))
    if url.scheme == "":
        guess_scheme = "http://%s" % original.strip()
        url = urllib.parse.urlparse(guess_scheme)
    url = url._replace(query=clean_query(url.query))
    if url.fragment.startswith("."):
        url = url._replace(fragment="")
    return url.geturl()


class TestClean(unittest.TestCase):

    def test_http(self):
        self.assertEqual(clean("http://www.foobar.com/"),
                               "http://www.foobar.com/")

    def test_https(self):
        self.assertEqual(clean("https://www.foobar.com"),
                               "https://www.foobar.com")

    def test_missing_schema_with_funny_port(self):
        # annoying bug in chromium; doesn't understand this format:
        self.assertEqual(clean("www.foobar.com:8000"),
                               "http://www.foobar.com:8000")

    def test_whitespace(self):
        self.assertEqual(clean("  http://www.foobar.com\n  "),
                               "http://www.foobar.com")

    def test_mutts_wrapping_at_the_start(self):
        self.assertEqual(clean("+https://www.foobar.com/"),
                               "https://www.foobar.com/")

    def test_mutts_wrapping_in_the_middle(self):
        self.assertEqual(clean("http://foobar.com/a5ed3268\n+80bb326a1"),
                               "http://foobar.com/a5ed326880bb326a1")

    def test_params(self):
        self.assertEqual(clean("http://www.foobar.com/path?q=foo+bar&id=6"),
                               "http://www.foobar.com/path?q=foo+bar&id=6")

    def test_bookmarks(self):
        self.assertEqual(clean("http://www.foobar.com/abcde.foo#hello-world"),
                               "http://www.foobar.com/abcde.foo#hello-world")

    def test_medium(self):
        self.assertEqual(clean("http://www.foobar.com/abcde.foo#.abcdefg"),
                               "http://www.foobar.com/abcde.foo")

    def test_utm(self):
        self.assertEqual(clean("http://www.foobar.com/path?q=foo&utm_baz=quux"),
                               "http://www.foobar.com/path?q=foo")

    def test_utm_with_whitespace(self):
        self.assertEqual(clean("http://www.foobar.com/path?utm_baz=quux\n"),
                               "http://www.foobar.com/path")

    def test_ftag(self):
        self.assertEqual(clean("http://www.foobar.com/path?q=foo&ftag=quux"),
                               "http://www.foobar.com/path?q=foo")


if __name__ == '__main__':
    if sys.argv[1] == "--test":
        sys.argv = sys.argv[:1]
        unittest.main()
    else:
        original = sys.argv[1]
        print(clean(original))
