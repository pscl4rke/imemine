#!/usr/bin/python3
#======================================================================#
# URL CLEANER                                    (c) 2016 P. S. Clarke #
#======================================================================#


# Rewrite URLs if necessary to strip out things.  Primarily to
# prevent too much identifying information from leaking out.


import contextlib
import os
import unittest
from urllib.parse import parse_qsl, quote_plus, urlparse, unquote
import sys


def encode(key, value):
    result = quote_plus(key)
    if value != "":
        result = result + "=" + quote_plus(value)
    return result


def clean_query(original):
    pairs = []
    for key, value in parse_qsl(original, keep_blank_values=True):
        if key.startswith("utm_"):
            continue
        if key == "fbclid":
            continue
        if key == "gclid":
            continue
        if key == "ftag":
            continue
        if key == "ocid":
            continue
        if key.startswith("ns_"):
            continue
        if key == "xtor":
            continue
        if key.startswith("_hs"):
            continue
        if key == "aff":
            continue
        pairs.append((key, value))
    # urlencode can't handle when the value is ""
    #return urllib.parse.urlencode(pairs)
    return "&".join(encode(key, value) for key, value in pairs)


def is_local(path):
    # FIXME bodgey, what if "10.foobar.com" is requested? Or a 172... one
    if path.startswith("192.168."):
        return True
    if path.startswith("10."):
        return True
    if path.startswith("localhost"):
        return True
    if path.startswith("127.0.0.1"):
        return True
    return False


def clean(original):
    splitfixed = original.strip().lstrip('+').replace("\n+", "")
    splitfixed = "".join(c for c in splitfixed if 31 < ord(c) < 127)
    if "://" not in splitfixed:
        if os.path.exists(splitfixed):
            splitfixed = "file://%s" % os.path.abspath(splitfixed.strip())
        elif is_local(splitfixed):
            splitfixed = "http://%s" % splitfixed.strip()
        else:
            # Now if you want http:// specify it explicitly
            splitfixed = "https://%s" % splitfixed.strip()
    url = urlparse(splitfixed.strip())
    if url.netloc.startswith("go.thereg") and url.path.startswith("/feed/"):
        return "https://" + url.path[6:]  # maybe recursively call clean(...)?
    if url.netloc == "prod.outgoing.prod.webservices.mozgcp.net":
        return unquote(url.path.split("/", 3)[-1])
    url = url._replace(query=clean_query(url.query))
    if url.fragment.startswith("."):
        url = url._replace(fragment="")
    if url.fragment.startswith("xtor"):
        url = url._replace(fragment="")
    return url.geturl()


@contextlib.contextmanager
def pushd(nested):
    cwd = os.getcwd()
    try:
        os.chdir(nested)
        yield
    finally:
        os.chdir(cwd)


class TestClean(unittest.TestCase):

    def test_http(self):
        self.assertEqual(clean("http://www.foobar.com/"),
                               "http://www.foobar.com/")

    def test_https(self):
        self.assertEqual(clean("https://www.foobar.com"),
                               "https://www.foobar.com")

    def test_missing_scheme(self):
        # used to be http, now assumes https
        self.assertEqual(clean("www.foobar.com"),
                               "https://www.foobar.com")

    def test_missing_schema_with_funny_port(self):
        # annoying bug in chromium; doesn't understand this format:
        self.assertEqual(clean("www.foobar.com:8000"),
                               "https://www.foobar.com:8000")

    def test_missing_scheme_with_localhost_doesnt_assume_ssl(self):
        self.assertEqual(clean("localhost:1234/foo"),
                               "http://localhost:1234/foo")
        self.assertEqual(clean("127.0.0.1"),
                               "http://127.0.0.1")

    def test_missing_scheme_with_lan_doesnt_assume_ssl(self):
        self.assertEqual(clean("192.168.0.1"),
                               "http://192.168.0.1")
        self.assertEqual(clean("10.4.9.1"),
                               "http://10.4.9.1")

    def test_whitespace(self):
        self.assertEqual(clean("  http://www.foobar.com\n  "),
                               "http://www.foobar.com")

    def test_picture_characters(self):
        self.assertEqual(clean("ï¿¼https://www.foobar.com"),
                               "https://www.foobar.com")

    def test_mutts_wrapping_at_the_start(self):
        self.assertEqual(clean("+https://www.foobar.com/"),
                               "https://www.foobar.com/")

    def test_mutts_wrapping_in_the_middle(self):
        self.assertEqual(clean("http://foobar.com/a5ed3268\n+80bb326a1"),
                               "http://foobar.com/a5ed326880bb326a1")

    def test_params(self):
        self.assertEqual(clean("http://www.foobar.com/path?q=foo+bar&id=6"),
                               "http://www.foobar.com/path?q=foo+bar&id=6")

    def test_key_without_value(self):
        self.assertEqual(clean("http://www.foobar.com/?abcdefghijk"),
                               "http://www.foobar.com/?abcdefghijk")

    def test_bookmarks(self):
        self.assertEqual(clean("http://www.foobar.com/abcde.foo#hello-world"),
                               "http://www.foobar.com/abcde.foo#hello-world")

    def test_medium(self):
        self.assertEqual(clean("http://www.foobar.com/abcde.foo#.abcdefg"),
                               "http://www.foobar.com/abcde.foo")

    def test_utm(self):
        self.assertEqual(clean("http://www.foobar.com/path?q=foo&utm_baz=quux"),
                               "http://www.foobar.com/path?q=foo")

    def test_utm_with_whitespace(self):
        self.assertEqual(clean("http://www.foobar.com/path?utm_baz=quux\n"),
                               "http://www.foobar.com/path")

    def test_facebook_click_id(self):
        self.assertEqual(clean("http://www.foobar.com/path?q=foo&fbclid=quux"),
                               "http://www.foobar.com/path?q=foo")

    def test_google_click_id(self):
        self.assertEqual(clean("http://www.foobar.com/path?q=foo&gclid=quux"),
                               "http://www.foobar.com/path?q=foo")

    def test_ftag(self):
        self.assertEqual(clean("http://www.foobar.com/path?q=foo&ftag=quux"),
                               "http://www.foobar.com/path?q=foo")

    def test_ocid(self):
        self.assertEqual(clean("http://www.foobar.com/path?q=foo&ocid=quux"),
                               "http://www.foobar.com/path?q=foo")

    def test_ns(self):
        self.assertEqual(clean("http://www.foobar.com/path?q=foo&ns_foo=quux"),
                               "http://www.foobar.com/path?q=foo")

    def test_xtor_query(self):
        self.assertEqual(clean("http://foo.com/a/bcd?xtor=A-32-[Thing]-X~Y~Z"),
                               "http://foo.com/a/bcd")

    def test_xtor_fragment(self):
        self.assertEqual(clean("http://foo.com/a/bcd#xtor=A-32-[Thing]-X~Y~Z"),
                               "http://foo.com/a/bcd")

    def test_hubspot_identifiers(self):
        self.assertEqual(clean("http://www.foobar.com/path?q=foo&_hsmi=ab&_hsenc=cd"),
                               "http://www.foobar.com/path?q=foo")

    def test_firefox_extensions(self):
        self.assertEqual(clean("https://prod.outgoing.prod.webservices.mozgcp.net/v1/4565083b9ce3c004bc1094bad8430faf1c98aa0a6d157f3afae65e94d2974e02/https%3A//example.com/foo/bar"),
                               "https://example.com/foo/bar")

    def test_affilitate_links(self):
        self.assertEqual(clean("https://foo.com/path?foo=bar&aff=thing"),
                               "https://foo.com/path?foo=bar")

    def test_reg_rss_link(self):
        self.assertEqual(clean("https://go.theregxxxxx.com/feed/www.foo.com/bar"),
                               "https://www.foo.com/bar")

    def test_local_but_absolute_paths(self):
        self.assertEqual(clean("/etc/fstab"),
                               "file:///etc/fstab")

    def test_local_but_relative_paths(self):
        with pushd("/etc"):
            self.assertEqual(clean("fstab"),
                                   "file:///etc/fstab")



if __name__ == '__main__':
    if sys.argv[1] == "--test":
        sys.argv = sys.argv[:1]
        unittest.main()
    else:
        original = sys.argv[1]
        print(clean(original))
