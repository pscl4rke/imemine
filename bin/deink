#!/bin/bash
#======================================================================#
# DEINK MULTI-PAGE SCANNER                       (c) 2014 P. S. Clarke #
#======================================================================#


# Notes:
#   -   Use --landscape to control the dimemsions of scanning
#   -   Use --spin to rotate image and control dimensions of output


# Bugs and Limitations:
#   -   No readline, so no command history etc.
#   -   There is no way to set the PDF metadata (which could
#       be used heavily by some indexing tools)
#   -   I have explored colourmode=lineart, but the output
#       is barely readable


# Utility Functions
# -----------------

progname="$(basename "$0")"

paddedpage() {
    printf "%03d" "$1"
}

msg() {
    echo "$progname: $@"
}


# Setting Some Defaults
# ---------------------

colourmode="gray"
orientation="portrait"
resolution="300dpi"
rotation="0"
usetesseract="true"


# Parsing The Command Line
# ------------------------

invalidarguments=""
while [ "$1" ]
do
    nextarg="$1"
    shift
    case "$nextarg" in
        --help)
            grep -e '^[[:space:]]*--.*)' "$0" | cat
            exit 0
            ;;
        --a4thin)
            inwidth=138
            inheight=295
            ;;
        --a4)
            #inwidth=210
            ##inheight="297.18"
            #inheight=300
            inwidth=208
            inheight=295
            ;;
        --a4sq)
            # A4, but trimmed to a square
            inwidth=208
            inheight=208
            ;;
        --a5)
            #inwidth=150
            #inheight=210
            inwidth=144
            inheight=206
            ;;
        --a6)
            inwidth=103
            inheight=146
            ;;
        --a7)
            inwidth=73
            inheight=103
            ;;
        --colour)
            colourmode="color"
            ;;
        --landscape)
            orientation="landscape"
            ;;
        --spin)
            rotation="270"
            ;;
        --no-ocr)
            usetesseract="false"
            ;;
        --high-def)
            resolution="600dpi"
            ;;
        --ultra-def)
            resolution="1200dpi"
            ;;
        *)
            msg "FATAL: Argument '$nextarg' not recognised"
            msg "FATAL: Try using '--help' for known ones."
            invalidarguments="yes"
    esac
done
[ "$invalidarguments" ] && exit 1


# Validation
# ----------

[ -z "$inheight" ] && msg "FATAL: Height unknown" && exit 1
[ -z "$inwidth" ] && msg "FATAL: Width unknown" && exit 1

if [ "$orientation" = "landscape" ]
then
    orientationtemp="$inheight"
    inheight="$inwidth"
    inwidth="$orientationtemp"
fi

if [ "$rotation" -eq "0" ]
then
    outheight="$inheight"
    outwidth="$inwidth"
else # bad: assumes 90 or 270! what about 180?
    outwidth="$inheight"
    outheight="$inwidth"
fi

# Setting Up
# ----------

originaldir="$(pwd)"
tempdir="$(mktemp --directory --tmpdir "$progname.XXXXXXXXXX")"
cd "$tempdir"
starttime="$(date +%s)"


# Scanning Prompt Loop
# --------------------

currentpage="0"
while :
do
    echo -n "Page ${currentpage}> "
    read command
    case "$command" in
        add)
            currentpage="$((currentpage + 1))"
            msg "Scanning page ${currentpage}..."
            basefile="page-$(paddedpage $currentpage)"
            imagefile="${basefile}.pnm"
            scanimage \
                -x "$inwidth" -y "$inheight" \
                --mode "$colourmode" --resolution "$resolution" \
                > "$imagefile"
            if [ "$rotation" -ne "0" ]; then
                msg "Rotating by $rotation degrees..."
                mogrify -rotate "$rotation" "$imagefile"
            fi
            if [ "$usetesseract" = true ]; then
                msg "OCRing page ${currentpage}..."
                timeout 2m tesseract -c 'tessedit_char_blacklist=ﬀﬁﬂ' \
                    "$imagefile" "$basefile"
                [[ $? -eq 124 ]] && echo TIMED OUT
                sed -i '/^ *$/d' "$basefile.txt"
            else
                msg "Not OCRing page!"
                touch "$basefile.txt"
            fi
            msg "Resizing image..."
            mogrify -resize "40%" "$imagefile"
            ;;
        edit)
            basefile="page-$(paddedpage $currentpage)"
            $EDITOR "${basefile}.txt"
            ;;
        view)
            basefile="page-$(paddedpage $currentpage)"
            open-in-image-viewer "$basefile.pnm"
            ;;
        colour)
            colourmode="color"
            ;;
        grey)
            colourmode="gray"
            ;;
        'done')
            buildargs=""
            for page in $(seq 1 $currentpage)
            do
                imagefile="page-$(paddedpage $page).pnm"
                textfile="page-$(paddedpage $page).txt"
                buildargs="$buildargs $textfile $imagefile"
            done
            ocr2pdf -x $outwidth -y $outheight $buildargs done.pdf
            break
            ;;
        quit)
            msg "Cancelling document..."
            break
            ;;
        kill)
            msg "Exiting without cleaning ${tempdir}..."
            exit 1
            ;;
    esac
done


# Tearing Down
# ------------

if [ -e done.pdf ]
then
    filename="$originaldir/scanned-$(date -Iseconds | sed 's/:/-/g' | sed 's/T/---/g').pdf"
    cp done.pdf "$filename"
    msg "Created $filename"
fi

cd "$originaldir"
rm  -r "$tempdir"

endtime="$(date +%s)"
duration="$(($endtime - $starttime))"
msg "Done in $duration seconds."
mins="$(($duration / 60))"
msg "That is $mins minutes."
