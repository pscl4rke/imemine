#!/bin/sh
#======================================================================#
# DEINK MULTI-PAGE SCANNER                       (c) 2014 P. S. Clarke #
#======================================================================#


# Notes:
#   -   Use --landscape to control the dimemsions of scanning
#   -   Use --spin to rotate image and control dimensions of output


# Bugs and Limitations:
#   -   No readline, so no command history etc.
#   -   There is no way to set the PDF metadata (which could
#       be used heavily by some indexing tools)


# Utility Functions
# -----------------

paddedpage() {
    printf "%03d" "$1"
}

msg() {
    echo "$(basename "$0"): $@"
}


# Setting Some Defaults
# ---------------------

colourmode="gray"
orientation="portrait"
rotation="0"


# Parsing The Command Line
# ------------------------

invalidarguments=""
while [ "$1" ]
do
    nextarg="$1"
    shift
    case "$nextarg" in
        --help)
            grep -e '^[[:space:]]*--.*)' "$0" | cat
            exit 0
            ;;
        --a4)
            inwidth=210
            #inheight="297.18"
            inheight=300
            ;;
        --a5)
            inwidth=150
            inheight=210
            ;;
        --a6)
            inwidth=107
            inheight=150
            ;;
        --colour)
            colourmode="color"
            ;;
        --landscape)
            orientation="landscape"
            ;;
        --spin)
            rotation="270"
            ;;
        *)
            msg "FATAL: Argument '$nextarg' not recognised"
            msg "FATAL: Try using '--help' for known ones."
            invalidarguments="yes"
    esac
done
[ "$invalidarguments" ] && exit 1


# Validation
# ----------

[ -z "$inheight" ] && msg "FATAL: Height unknown" && exit 1
[ -z "$inwidth" ] && msg "FATAL: Width unknown" && exit 1

if [ "$orientation" = "landscape" ]
then
    orientationtemp="$inheight"
    inheight="$inwidth"
    inwidth="$orientationtemp"
fi

if [ "$rotation" -eq "0" ]
then
    outheight="$inheight"
    outwidth="$inwidth"
else # bad: assumes 90 or 270! what about 180?
    outwidth="$inheight"
    outheight="$inwidth"
fi

# Setting Up
# ----------

originaldir="$(pwd)"
tempdir="$(mktemp --directory)"
cd "$tempdir"


# Scanning Prompt Loop
# --------------------

currentpage="0"
while :
do
    echo -n "Page ${currentpage}> "
    read command
    case "$command" in
        add)
            currentpage="$((currentpage + 1))"
            msg "Scanning page ${currentpage}..."
            basefile="page-$(paddedpage $currentpage)"
            imagefile="${basefile}.pnm"
            scanimage \
                -x "$inwidth" -y "$inheight" \
                --mode "$colourmode" --resolution "300dpi" \
                > "$imagefile"
            if [ "$rotation" -ne "0" ]; then
                msg "Rotating by $rotation degrees..."
                mogrify -rotate "$rotation" "$imagefile"
            fi
            msg "OCRing page ${currentpage}..."
            tesseract -c 'tessedit_char_blacklist=ﬀﬁﬂ' \
                "$imagefile" "$basefile"
            msg "Resizing image..."
            mogrify -resize "40%" "$imagefile"
            ;;
        edit)
            basefile="page-$(paddedpage $currentpage)"
            $EDITOR "${basefile}.txt"
            ;;
        'done')
            buildargs=""
            for page in $(seq 1 $currentpage)
            do
                imagefile="page-$(paddedpage $page).pnm"
                textfile="page-$(paddedpage $page).txt"
                buildargs="$buildargs $textfile $imagefile"
            done
            ocr2pdf -x $outwidth -y $outheight $buildargs done.pdf
            break
            ;;
        quit)
            msg "Cancelling document..."
            break
            ;;
        kill)
            msg "Exiting without cleaning ${tempdir}..."
            exit 1
            ;;
    esac
done


# Tearing Down
# ------------

if [ -e done.pdf ]
then
    filename="$originaldir/scanned-$(date -Iseconds | sed 's/:/-/g' | sed 's/T/---/g').pdf"
    cp done.pdf "$filename"
    msg "Created $filename"
fi

cd "$originaldir"
rm  -r "$tempdir"
msg "Done!"


