#!/usr/bin/python3


# This script connects to the default GPG agent, which uses the
# default pinentry to ask for a password.  This then gets spat
# out on stdout.  Sort of a bit like "zenity --password".
#
# Why bother with GPG agent at all?  Because it will cache passwords
# for a while afterwards, meaning you don't get repeatedly promted for
# the same password.


import argparse
import subprocess
import sys
from urllib.parse import quote_plus


def main():
    #cache_id = "ExampleIdentifier"
    args = parse_args(sys.argv[1:])
    if args.clear:
        clear_agent(args.cache_id)
    else:
        prompt = args.prompt or "Enter the password"
        description = args.description or f"Get and cache the '{args.cache_id}' password"
        error_msg = "Underneath in italics"  # cannot be blank
        pw = ask_agent(args.cache_id, prompt, description, error_msg)
        sys.stdout.write(pw)
        sys.stdout.write("\n")


def parse_args(args):
    parser = argparse.ArgumentParser()
    parser.add_argument("cache_id")
    parser.add_argument("--prompt")
    parser.add_argument("--description")
    parser.add_argument("--clear", action="store_true")
    return parser.parse_args(args)


def clear_agent(cache_id):
    instruction = " ".join((
        "CLEAR_PASSPHRASE",
        cache_id,
    ))
    subprocess.run(
        ["gpg-connect-agent"],
        input=instruction.encode(),
    )


def ask_agent(cache_id, prompt, description, error_msg):
    instruction = " ".join((
        "GET_PASSPHRASE",
        "--data",
        cache_id,
        quote_plus(error_msg),
        quote_plus(prompt),
        quote_plus(description),
    ))
    #print(repr(instruction))
    result = subprocess.run(
        ["gpg-connect-agent"],
        input=instruction.encode(),
        capture_output=True,
    )
    output = result.stdout.splitlines()
    if output[-1] != b"OK":
        sys.stderr.write(repr(result.stdout))
        sys.stderr.write("\n")
        sys.stderr.write(repr(result.stderr))
        sys.stderr.write("\n")
        sys.exit(1)
    data = output[0].decode()[2:]  # strip "D " at start
    return data


if __name__ == "__main__":
    main()
