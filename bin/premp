#!/usr/bin/python3
#======================================================================#
# PRE-MP EMAIL CLEANSER                     (c) 2014,2018 P. S. Clarke #
#======================================================================#


# `mp` is a program that reads an email from STDIN and writes a
# postscript rendering of it to STDOUT.
#
# It is reasonable, but has many weaknesses, mostly because it
# predates MIME encoding, attachments, HTML parts etc.
#
# This script sits in the pipeline before mp, and cleans it into
# a state that mp can use.  E.g. scrubbing non plaintext parts.


import email
import email.header
import subprocess
import sys


# Need to do:   handle emails that are only text/html, not multipart
# Want to do:   handle non-ascii encodings in content/headers (esp apostrophes)
# Want to do:   stop using one line per address in headers
# Maybe to do:  add local time
# Maybe to do:  render html into text instead of bundled text/plain
# Maybe to do:  hash the contents of attachments to find them again


def cleanup(header):
    """Fix the RFC 2047 Mime-Encoded-Word stuff in headers."""
    parts = email.header.decode_header(header)
    decoded_parts = []
    for (part, enc) in parts:
        if isinstance(part, str):
            decoded_parts.append(part)
        else:
            decoded_parts.append(part.decode("ascii" if (enc is None) else enc))
    full = " ".join(word for word in (" ".join(decoded_parts)).split())
    return full.replace(", ", ",\n ")


class PreMP:

    def __init__(self):
        self.last_output_line = ""

    def writeln(self, line):
        line = line.rstrip().replace("\n", "").replace("\r", "")
        if (line == "") and (line == self.last_output_line):
            # don't print more than one blank line
            return
        self.last_output_line = line
        # Postscript files have a very weird character encoding (CP-1276):
        #   https://en.wikipedia.org/wiki/PostScript_Standard_Encoding
        # The most flexible way to show "unicode" is to use `glyphshow`.
        #sys.stdout.buffer.write(b"%se\xb4\x08e\xa3\n" % line.encode('ascii', 'replace'))
        sys.stdout.buffer.write(b"%s\n" % line.encode('ascii', 'replace'))

    def main(self):
        text = sys.stdin.buffer.read()
        if len(text) == 0:
            raise Exception("Read message of zero length")
        msg = email.message_from_bytes(text)
        self.writeln("From: %s" % cleanup(msg['From']))
        self.writeln("To: %s" % cleanup(msg['To']))
        if 'Cc' in msg:
            self.writeln("Cc: %s" % cleanup(msg['Cc']))
        self.writeln("Subject: %s" % cleanup(msg['Subject']))
        self.writeln("Date: %s" % msg['Date'])
        self.writeln("")
        for part in msg.walk():
            if part.get_content_maintype() == 'multipart':
                continue
            if part.get_content_type() == 'text/plain':
                self.writeln("")
                self.writeln("==== text/plain ====")
                self.writeln("")
                payload = part.get_payload(decode=True)
                # or use get_content_charset() or get_param('charset')!!!
                _type, _sc, rest = part.get('Content-Type', ';ascii').partition(';')
                charset = rest.strip().replace('charset=', '')
                for line in payload.decode(charset).splitlines():
                    self.writeln(line)
            elif part.get_content_type() == "text/html":
                self.writeln("")
                self.writeln("==== text/html ====")
                self.writeln("")
                payload = part.get_payload(decode=True)
                process = subprocess.run(["jerks", "--raw-html"],
                                         input=payload, capture_output=True,
                                         check=True)
                unmarked = process.stdout.decode()
                for line in unmarked.splitlines():
                    self.writeln(line)
            else:
                mtype = part.get_content_type()
                size = len(part.get_payload())
                self.writeln("")
                self.writeln("| A %r part was scrubbed (%i bytes)" % (mtype, size))
                for key, value in part.items():
                    self.writeln("|     %s: %s" % (key, value))
                self.writeln("")


if __name__ == '__main__':
    PreMP().main()
