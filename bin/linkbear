#!/usr/bin/python3


import configparser
import os
import shlex
import subprocess
import sys
import urllib.parse


USAGE = """
Usage:
    $ linkbear <location> <query arguments ...>
    $ linkbear --list
    $ linkbear --help

"""


def config_directory():
    return os.path.join(os.environ["HOME"], ".linkbear")


def zenity_args():
    if os.path.exists("/usr/bin/yad"):
        return ["/usr/bin/yad", "--center"]
    return ["/usr/bin/zenity"]


class SearchLocation:

    def __init__(self, name, desc, url):
        self.name = name
        self.desc = desc
        self.url = url

    def url_to_launch(self, query):
        return self.url.format(query=urllib.parse.quote_plus(query))


class Prompt:

    def ask_user(self, name, desc, initial):
        args = zenity_args()
        args.extend(["--entry", "--title", name,
            "--text", desc, "--entry-text", initial])
        #result = subprocess.run(args, capture_output=True) # from 3.7
        result = subprocess.run(args, stdout=subprocess.PIPE)
        if result.returncode != 0:
            return None
        return result.stdout.decode().strip()


class Browser:

    def launch_ephemerally(self, url):
        subprocess.run(["open-in-browser-bg", url])

    def launch_with_profile(self, profile, url):
        subprocess.run(["open-in-browser-bg", "-p", profile, url])


class Runner:

    def __init__(self):
        self.locations = {}

    def run(self):
        self.load_from_dir(config_directory())
        args = self.parse_command_line()
        if args.location == "--list":
            for location in self.locations.values():
                print("%s -- %s" % (location.name.ljust(20), location.desc))
        else:
            location = self.locations[args.location]
            query = " ".join(args.query_parts)
            if args.prompt:
                query = Prompt().ask_user(location.name, location.desc, query)
            if query is not None:
                url = location.url_to_launch(query)
                Browser().launch_ephemerally(url)

    def load_from_dir(self, dirpath):
        for filename in sorted(os.listdir(dirpath)):
            if filename.endswith(".ini"):
                self.load_from_file(os.path.join(dirpath, filename))

    def load_from_file(self, filepath):
        parser = configparser.ConfigParser()
        parser.read(filepath)
        for section_heading in parser.sections():
            section_settings = dict(parser.items(section_heading))
            section_type, *section_args = shlex.split(section_heading)
            if section_type == "search":
                self.load_search(section_args[0], section_settings)
            else:
                raise Exception("Unknown section type: %r" % section_type)

    def load_search(self, name, settings):
        desc = settings.get("desc", "Run a %s search" % name)
        url = settings["url"]
        self.locations[name] = SearchLocation(name, desc, url)

    def parse_command_line(self):
        # don't use argparse, because there's no way for --list to make
        # the location optional...
        class Options:
            location = "--help"
            prompt = False
        options, remaining = Options(), []
        for argument in sys.argv[1:]:
            if argument in ("--help", "--list"):
                options.location = argument
            elif argument == "--prompt":
                options.prompt = True
            elif argument.startswith("-"):
                raise Exception("Unknown: %r" % argument)
            else:
                remaining.append(argument)
        if len(remaining) > 0:
            options.location = remaining.pop(0)
        options.query_parts = remaining
        if options.location == "--help":
            sys.stderr.write(USAGE)
            sys.exit(1)
        return options



if __name__ == '__main__':
    Runner().run()
