#!/usr/bin/python3
#======================================================================#
# PRINT-EMAIL FORMATTING SCRIPT                  (c) 2018 P. S. Clarke #
#======================================================================#


import logging
LOG = logging.getLogger("print-email")

import email
import email.header
#import os
import re
import subprocess
import sys


# TODO: Handle emails that only have an HTML part.
#           (maybe pipe through jerks first)
#           (this is an increasingly common problem)


PREMP = ["/home/psc/imemine/bin/premp"]
MP = ["/usr/bin/mp"]
PP = ["/home/psc/imemine/bin/pp"]
PS2PDF = ["/usr/bin/ps2pdf", "-", "-"]


def cleanup(header):
    """Fix the RFC 2047 Mime-Encoded-Word stuff in headers."""
    parts = email.header.decode_header(header)
    full = " ".join(part if (enc is None) else part.decode(enc)
                    for (part, enc) in parts)
    return " ".join(word for word in full.split())


def run(args, data_in):
    LOG.info("Running %r with %i bytes of stdin", args, len(data_in))
    process = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    data_out, _ = process.communicate(data_in)
    #process.wait()  # not needed with communicate
    exitcode = process.poll()
    if exitcode != 0:
        raise Exception("%s returned %i" % (args[0], exitcode))
    return data_out
    # For some reason this breaks pp's ability to do an interactive prompt
    #result = subprocess.run(args, check=True, capture_output=True, input=data_in)
    #return result.stdout


def main():
    raw_message = sys.stdin.buffer.read()
    email_message = email.message_from_bytes(raw_message)
    title = cleanup(email_message['Subject'])
    LOG.debug("The title (from the subject) is %r" % title)
    clean_message = run(PREMP, raw_message)
    raw_postscript = run(MP, clean_message)
    # I think the "Header" is used by ps-to-pdf conversion
    clean_postscript = re.sub(
        rb"\$Header.*\$",
        title.encode('ascii', 'replace'),
        raw_postscript,
    )
    #pdf_message = run(PS2PDF, clean_postscript)
    #outfile_name = "%s.pdf" % title
    #outfile_path = os.path.join(os.environ["HOME"], "Desktop", outfile_name)
    #if os.path.exists(outfile_path):
    #    raise Exception("%r already exists" % outfile_path)
    #with open(outfile_path, "wb") as outfile:
    #    outfile.write(pdf_message)
    #print("YOU KNOW, YOU COULD BE USING PP FOR THIS!")
    run(PP, clean_postscript)


if __name__ == '__main__':
    logging.basicConfig(level="DEBUG")
    main()
