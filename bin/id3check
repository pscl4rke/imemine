#!/usr/bin/python3


from functools import lru_cache as cache
import os
import re
import sys
import time

import mutagen, mutagen.id3


# catch double space chars etc
# improve genre checking
# check title-case tracks
# check artist names first-last
# check id3v1 data matches id3v2 data
# check filename matches id3v2 data
# check album art of good quality
# perhaps check the year


INCLUDES_TRACK_NUMBER = re.compile(r"^\d\d\. ")


def is_a_recent_file(path):
    one_year = 60 * 60 * 24 * 365
    threshold = time.time() - (one_year * 4.5)  # increase as necessary
    mtime = os.stat(path).st_mtime
    return (mtime > threshold)


def is_a_year(value):
    if isinstance(value, mutagen.id3.ID3TimeStamp):
        value = str(value)
    if len(value) != 4:
        return False
    if not value.isdigit():
        return False
    return True


def contains_smart_quotes(value):
    for char in "\u0060\u201c\u201d\u201e\u201f\u2018\u2019\u201a\u201b":
        if char in value:
            return True
    return False


def contains_invalid_path_chars(value):
    for char in "'\"!*?:|<>\\":
        if char in value:
            return True
    return False


def check(path_to_check):
    if os.path.isdir(path_to_check):
        yield from check_album_dir(path_to_check)
    elif path_to_check.endswith(".mp3"):
        album_dir = None  # Not an elegant solution :(
        yield from check_mp3(album_dir, path_to_check)
    elif not os.path.exists(path_to_check):
        yield path_to_check, "Path missing"
    else:
        yield path_to_check, "I don't know what you mean by this"


class AlbumDir:

    def __init__(self, path):
        self.path = path

    @cache
    def all_contents(self):
        return os.listdir(self.path)

    @cache
    def track_numbers(self):
        numbers = []
        for name in self.all_contents():
            part_one = name.split()[0]
            if part_one.isdigit():
                numbers.append(part_one)
        return numbers


def check_album_dir(path_to_check):
    album_dir = AlbumDir(path_to_check)
    files = album_dir.all_contents()
    if len(files) == 0:
        yield path_to_check, "Empty Folder"
    tracks = album_dir.track_numbers()
    if ("01" not in tracks) and ("101" not in tracks):
        yield path_to_check, "Missing file 01 or 101"
    files.sort()
    if "Folder.jpg" not in files:
        yield path_to_check, "Missing Folder.jpg"
    for filename in files:
        path = os.path.join(path_to_check, filename)
        if filename.endswith(".mp3"):
            yield from check_mp3(album_dir, path)
        elif filename == "Folder.jpg":
            pass  # FIXME check the picture is good
        elif filename.startswith("README"):
            pass
        elif filename.endswith(".gz") or filename.endswith(".txt"):
            pass
        else:
            yield path, "Unexpected file"


def check_mp3(album_dir, path_to_check):
    try:
        src = mutagen.id3.ID3(path_to_check, translate=False, load_v1=False)
    except mutagen.id3._util.ID3NoHeaderError:
        yield path_to_check, "No ID3 header at all"
        return
    yield from check_file_naming(src, path_to_check)
    yield from check_from_wipe_mp3_junk_script(src, path_to_check)
    yield from check_track_numbering(album_dir, src, path_to_check)
    yield from check_genre(src, path_to_check)
    yield from check_album(src, path_to_check)
    yield from check_title(src, path_to_check)
    yield from check_artists(src, path_to_check)
    yield from check_composer(src, path_to_check)
    if is_a_recent_file(path_to_check):
        yield from check_tagging_version(src, path_to_check)
        yield from check_year(src, path_to_check)
        yield from check_classical(src, path_to_check)
        yield from check_soundtrack(src, path_to_check)
        yield from check_recent_stuff(src, path_to_check)


def check_file_naming(src, path_to_check):
    if contains_invalid_path_chars(path_to_check):
        yield path_to_check, "Contains invalid path characters"
    try:
        filename_track = int(os.path.basename(path_to_check).split(" ", 1)[0], base=10)
    except Exception as exc:
        yield path_to_check, "Invalid file name: %r" % exc
        return
    try:
        metadata_track = int(src["TRCK"].text[0].split("/")[0], base=10)
    except Exception as exc:
        yield path_to_check, "Invalid track number: %r" % exc
        return
    if filename_track != metadata_track:
        yield path_to_check, "File name doesn't match track number %r" % metadata_track


def check_from_wipe_mp3_junk_script(src, path_to_check):
    # See imemine/bin/wipe-mp3-junk for a script that cleans up the mp3
    # files but I keep forgetting exists.
    for prefix in ["TXXX", "TSSE", "TENC", "TDEN", "TLEN", "TBPM", "TFLT", "TPOS",
                   "TMED", "TCOP", "TPUB", "APIC", "PRIV", "MCDI", "COMM", "TCMP"]:
        for key in src:
            if key.startswith(prefix):
                yield path_to_check, "Contains key %r saying %r" % (key, src[key])


def check_track_numbering(album_dir, src, path_to_check):
    if "TRCK" not in src:
        yield path_to_check, "Missing track number"
        return
    if "/" not in src["TRCK"].text[0]:
        yield path_to_check, "Track number missing total number of tracks"
    else:
        track = int(src["TRCK"].text[0].split("/")[0])
        total = int(src["TRCK"].text[0].split("/")[1])
        if track < 100 and track > total:
            yield path_to_check, "Nonsensical: %s" % src["TRCK"].text[0]
        if album_dir is not None:
            number_of_tracks = len(album_dir.track_numbers())
            if total != number_of_tracks:
                yield path_to_check, "Folder has %i tracks but ID3 says %i" % (
                                            number_of_tracks, total)


def check_genre(src, path_to_check):
    if "TCON" not in src:
        yield path_to_check, "Missing genre"
        return
    genre = src["TCON"].text[0]
    if genre == "":
        yield path_to_check, "Blank genre"
    if "unknown" in genre.lower():
        yield path_to_check, "Unknown genre"
    if ";" in genre:
        yield path_to_check, "Invalid multigenre"


def check_album(src, path_to_check):
    if "TALB" not in src:
        yield path_to_check, "Missing album"
        return
    if contains_smart_quotes(src["TALB"].text[0]):
        yield path_to_check, "Album contains smart quotes"


def check_title(src, path_to_check):
    if "TIT2" not in src:
        yield path_to_check, "Missing track title"
        return
    if INCLUDES_TRACK_NUMBER.match(src["TIT2"].text[0]):
        yield path_to_check, "Title includes track number"
    if contains_smart_quotes(src["TIT2"].text[0]):
        yield path_to_check, "Title contains smart quotes"


def check_artists(src, path_to_check):
    if "TPE1" not in src:
        yield path_to_check, "Missing artist"
        return
    if INCLUDES_TRACK_NUMBER.match(src["TPE1"].text[0]):
        yield path_to_check, "Artist includes track number"
    if contains_smart_quotes(src["TPE1"].text[0]):
        yield path_to_check, "Artist contains smart quotes"


def check_year(src, path_to_check):
    if "TDRC" in src and not is_a_year(src["TDRC"].text[0]):
        yield path_to_check, "Invalid TDRC year: %r" % src["TDRC"].text[0]
    if "TDRL" in src and not is_a_year(src["TDRL"].text[0]):
        yield path_to_check, "Invalid TDRL year: %r" % src["TDRL"].text[0]
    # FIXME also check TYER
    if "TDRL" in src and "TDRC" not in src:
        # While some programs (e.g. VLC on Android) will pick
        # up the year from other tags, MPD will only get it from
        # the ID3v2 TDRC tag.
        # Note that "eyeD3 -Y" sets TDRL whereas "abcde" sets TDRC
        year = src["TDRL"].text[0]
        yield path_to_check, "Year (%r) in wrong tag" % year


def check_classical(src, path_to_check):
    if "TCON" not in src:
        return
    genre = src["TCON"].text[0].lower()
    if "classical" not in genre:
        return
    if "TCOM" not in src:
        yield path_to_check, "Missing composer (TCOM)"
    if "TPE3" not in src:
        yield path_to_check, "Missing performer (TPE3)"


def check_composer(src, path_to_check):
    if "TCOM" not in src:
        return
    composer = src["TCOM"].text[0]
    if ";" in composer:
        yield path_to_check, "Semi-Colon in composer: %r" % composer
    if "," in composer:
        yield path_to_check, "Comma in composer: %r" % composer
    if " " not in composer:
        if composer not in ("Anonymous", "Various", "Traditional"):
            yield path_to_check, "Composer missing both names: %r" % composer


def check_soundtrack(src, path_to_check):
    if "TCON" not in src:
        return
    genre = src["TCON"].text[0].lower()
    if "soundtrack" not in genre:
        return
    if "TCOM" not in src:
        yield path_to_check, "Missing composer"
    #if "TPE3" not in src:
    #    yield path_to_check, "Missing performer (TPE3)"


def check_tagging_version(src, path_to_check):
    if src.version < (2, 4):
        yield path_to_check, f"Still using ID3 version {src.version}"


def check_recent_stuff(src, path_to_check):
    if "TDTG" in src:
        yield path_to_check, "Unwanted tagging date"
    if "TCON" in src:
        genre = src["TCON"].text[0]
        if genre.startswith("("):
            if src.version >= (2, 4):
                yield path_to_check, "Old ID3 v2.3 genre"


def display(path, problem, dest):
    coloured = dest.isatty()
    parts = []
    if "/" in path:
        dir, base = path.rsplit("/", 1)
    else:
        dir, base = path, "n/a"  # FIXME
    if coloured:
        parts.append("\x1b[34;1m")
    parts.append("%s/" % dir)
    if coloured:
        parts.append("\x1b[0m")
        parts.append("\x1b[34m")
    parts.append("%s: " % base)
    if coloured:
        parts.append("\x1b[0m")
        parts.append("\x1b[31m")
    parts.append(problem[:200])
    if coloured:
        parts.append("\x1b[0m")
    parts.append("\n")
    dest.write("".join(parts))


def main():
    for path_to_check in sys.argv[1:]:
        for path, problem in check(path_to_check):
            display(path, problem, sys.stdout)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("[Interrupted]\n")
