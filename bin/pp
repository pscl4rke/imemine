#!/usr/bin/python3
#======================================================================#
# PP PRINTING PROMPT FOR PS DOCUMENTS            (c) 2016 P. S. Clarke #
#======================================================================#


import subprocess
import sys
import tempfile


# FIXME if I add "-t/--title" then I could save to the desktop as $title.pdf
# and take over part of the `print-email` command.

# FIXME if I want it to replace using "lp" directly I need to make it handle
# things other than just postscript.

# FIXME how about counting up the page numbers (e.g. with pdfinfo)


def info(message):
    sys.stderr.write("%s\n" % message)
    sys.stderr.flush()  # maybe superfluous


def handle_postscript_file(psfilename):
    with tempfile.NamedTemporaryFile(suffix=".pdf") as pdffile:
        pdffilename = pdffile.name
        info("I'm converting that into %r..." % pdffilename)
        subprocess.check_call(["ps2pdf", psfilename, pdffilename])
        handle_pdf_file(pdffilename)


def handle_pdf_file(pdffilename):
    while True:
        info("  1p    Print one page per side")
        info("  2p    Print two pages per side")
        info("  ve    View in evince")
        info("  q     Quit")
        command = open("/dev/tty").readline().strip()
        if command == "1p":
            subprocess.check_call(["lp", pdffilename])
        elif command == "2p":
            subprocess.check_call(["lp", "-o", "number-up=2", pdffilename])
        elif command == "ve":
            subprocess.check_call(["evince", pdffilename])
        elif command == "q":
            break
        else:
            info("Huh? %r" % command)


def main():
    if len(sys.argv) == 2:
        handle_postscript_file(sys.argv[1])
    else:
        with tempfile.NamedTemporaryFile(suffix=".ps") as psfile:
            info("I'm saving that into %r..." % psfile.name)
            psfile.write(sys.stdin.buffer.read())
            psfile.flush()
            handle_postscript_file(psfile.name)


if __name__ == '__main__':
    main()
