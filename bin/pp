#!/usr/bin/python3
#======================================================================#
# PP PRINTING PROMPT FOR PS DOCUMENTS            (c) 2016 P. S. Clarke #
#======================================================================#


import os
import subprocess
import sys
import tempfile
import traceback


# FIXME if I add "-t/--title" then I could save to the desktop as $title.pdf
# and take over part of the `print-email` command.
# I could also look for "%%Title: LastMinuteHostingList" lines in the postscript

# FIXME if I want it to replace using "lp" directly I need to make it handle
# things other than just postscript.

# FIXME what if lpstat isn't available


def info(message):
    sys.stderr.write("%s\n" % message)
    sys.stderr.flush()  # maybe superfluous


def best_printer():
    try:
        printers = subprocess.check_output(["lpstat", "-p"])
    except subprocess.CalledProcessError:
        printers = b""
    if b"envy5010" in printers:
        return "envy5010"  # FIXME what about the duplex version
    if b"HP_ENVY_5000_series_ernie" in printers:
        return "HP_ENVY_5000_series_ernie"  # FIXME what about the duplex version
    return "HL1110"


def get_title_from_header_of(psfilename):
    with open(psfilename, "rb") as psfile:
        for line in psfile:
            if line.startswith(b"%%Title: "):
                return line.decode()[9:].strip()
    return None


def looks_like_a_postscript(psfilename):
    # note that PDF starts with things like "%PDF-1.4"
    expected = b"%!PS"
    with open(psfilename, "rb") as psfile:
        start = psfile.read(len(expected))
    return start == expected


def handle_postscript_file(psfilename, title):
    if not looks_like_a_postscript(psfilename):
        raise Exception("Is that really a postscript!?!?")
    if title is None:
        title = get_title_from_header_of(psfilename)
    if title is None:
        title = "FIXME"  # FIXME
    with tempfile.NamedTemporaryFile(suffix=".pdf") as pdffile:
        pdffilename = pdffile.name
        info("I'm converting that into %r..." % pdffilename)
        subprocess.check_call(["ps2pdf", psfilename, pdffilename])
        subprocess.run(f"pdfinfo {pdffilename} | grep ^Pages:", shell=True)
        handle_pdf_file(pdffilename, title)


def handle_pdf_file(pdffilename, title):
    info("Title: %s" % title)
    while True:
        info("  1p    Print one page per side to %s" % best_printer())
        info("  2p    Print two pages per side to %s" % best_printer())
        info("  ve    View in evince")
        info("  vm    View in mupdf")
        info("  vz    View in zathura")
        #info("  sh    Save a copy here")
        info("  sd    Save a copy to Desktop/Downloads")
        info("  q     Quit")
        command = open("/dev/tty").readline().strip()
        carry_on = run_command(pdffilename, command, title)
        if not carry_on:
            break


def run_command(pdffilename, command, title):
    try:
        if command == "1p":
            subprocess.check_call(["lp", "-d", best_printer(), pdffilename])
        elif command == "2p":
            subprocess.check_call(["lp", "-d", best_printer(),
                                   "-o", "number-up=2", pdffilename])
        elif command == "ve":
            subprocess.check_call(["evince", pdffilename])
        elif command == "vm":
            subprocess.check_call(["mupdf", pdffilename])
        elif command == "vz":
            subprocess.check_call(["zathura", pdffilename])
        #elif command == "sh":
        #    info("FIXME")
        #    pass # FIXME save here
        elif command == "sd":
            outfile_name = "%s.pdf" % title
            outfile_path = os.path.join(os.environ["HOME"], "Desktop", outfile_name)
            if os.path.exists(outfile_path):
                info("%r already exists" % outfile_path)
            else:
                subprocess.check_call(["cp", pdffilename, outfile_path])
        elif command == "q":
            return False
        else:
            info("Huh? %r" % command)
    except:
        traceback.print_exc()
    return True


def main():
    if len(sys.argv) == 2:
        handle_postscript_file(sys.argv[1], None)
    else:
        with tempfile.NamedTemporaryFile(suffix=".ps") as psfile:
            info("I'm saving that into %r..." % psfile.name)
            psfile.write(sys.stdin.buffer.read())
            psfile.flush()
            handle_postscript_file(psfile.name, None)


if __name__ == '__main__':
    main()
