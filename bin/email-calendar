#!/usr/bin/python3


import argparse
import datetime
import os
import re
import shlex
import subprocess
import sys
import time

from email.message import Message
from email.utils import formatdate


def datestr(value):
    # Must be YYYYMMDD for calendar, but also permit and fix YYYY-MM-DD
    value = value.replace("-", "")
    regex = re.compile("^\d{8}$")
    if not re.fullmatch(regex, value):
        raise ValueError("%r is not a valid date")
    return value


def parse_args(args):
    parser = argparse.ArgumentParser()
    parser.add_argument("calendarfile")
    parser.add_argument("toaddress")
    parser.add_argument("--sendmail", default="/usr/sbin/sendmail")
    today = datetime.date.today().strftime("%Y%m%d")
    parser.add_argument("-d", "--date", default=today, type=datestr)
    return parser.parse_args(args)


class ReminderSender:

    use_local_timezone = True

    def __init__(self, args):
        self.args = args

    def run_sanity_checks(self):
        # calendar does not error on missing file, just uses system files!
        if not os.path.exists(self.args.calendarfile):
            raise Exception("No file %r" % self.args.calendarfile)

    def reminders_to_send(self):
        args = ["calendar", "-f", self.args.calendarfile,
                            "-l", "0", "-t", self.args.date]
        raw_text = subprocess.check_output(args)
        for line in raw_text.splitlines():
            _month, _daystar, reminder = line.decode("utf8").strip().split(None, 2)
            yield reminder

    def build_email_for(self, reminder):
        email = Message()
        email["To"] = "remind you <%s>" % self.args.toaddress
        email["From"] = self.args.toaddress
        email["Subject"] = reminder
        email["Date"] = formatdate(None, self.use_local_timezone)
        # Placeholder body - minimise risk of spam filtering:
        email.set_payload("Placeholder %s" % datetime.datetime.now().isoformat())
        return email

    def send_reminder(self, reminder):
        email = self.build_email_for(reminder)
        args = shlex.split(self.args.sendmail)
        args.append(self.args.toaddress)
        sendmail = subprocess.Popen(args, stdin=subprocess.PIPE)
        sendmail.communicate(email.as_bytes())

    def send_all(self):
        self.run_sanity_checks()
        for reminder in self.reminders_to_send():
            self.send_reminder(reminder)
            time.sleep(5) # to ensure they come through in order


if __name__ == '__main__':
    args = parse_args(sys.argv[1:])
    ReminderSender(args).send_all()
