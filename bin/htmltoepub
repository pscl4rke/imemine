#!/usr/bin/env python
#======================================================================#
# HTML-TO-EPUB CONVERTER                         (c) 2012 P. S. Clarke #
#======================================================================#


#TODO:
#    -   Satisfy epubcheck.jar and other checkers
#    -   Choose a licence
#    -   Test with the proper java tester
#    -   What do other tools say the 'standards' are?
#            -   http://www.jedisaber.com/eBooks/Tutorial.shtml
#            -   https://github.com/javierarce/epub-boilerplate
#    -   Use chardet or equivalent
#    -   Handle pre-existing epub file (prob delete)
#    -   Work with only one argument
#    -   Support multiple input files - one per chapter
#    -   Support images
#    -   Perhaps a nicer CSS
#    -   Handle cover images


import sys
import zipfile
import string
import datetime
import uuid
import subprocess


USAGE = """
Usage:
    htmltoepub [options...] inputfile.html outputfile.epub

Htmltoepub is a self-contained script that takes an HTML file
and puts its contents inside an Epub book file.

Options:

--title "Title"
    Specify the title that will be recorded in the book's metadata.
    If this is not given htmltoepub wants to do the intelligent thing
    and work one out from the HTML input, but currently can't because
    I'm not a good enough programmer.

--author "Author's Name"
    Specify the author that will be recorded in the book's metadata.
    If this is not given htmltoepub will simply resort to "Unknown".

--date "YYYY-MM-DD"
    Specify the date that will be recorded in the book's metadata.
    This should be in ISO 8601 format, and will default to the current
    date.

--tidy, --notidy
    By default the --tidy option is enabled, and all incoming HTML
    is fed through HTML Tidy to ensure it is valid XHTML.  This can
    be disabled to avoid inadvertant corruption.
"""


CONTAINER = string.Template("""
<?xml version="1.0" encoding="UTF-8"?>
<container xmlns="urn:oasis:names:tc:opendocument:xmlns:container" version="1.0">
  <rootfiles>
    <rootfile full-path="metadata.opf" media-type="application/oebps-package+xml"/>
  </rootfiles>
</container>
""".lstrip())


METAFILE = string.Template("""
<?xml version="1.0" encoding="utf-8"?>
<package unique-identifier="BookId" version="2.0" xmlns="http://www.idpf.org/2007/opf">
  <metadata xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:opf="http://www.idpf.org/2007/opf">
    <dc:title>${TITLE}</dc:title>
    <dc:creator opf:role="aut">${AUTHOR}</dc:creator>
    <dc:contributor opf:role="bkp">${SOFTWARE}</dc:contributor>
    <dc:date>${DATE}</dc:date>
    <dc:identifier id="BookId">${ID}</dc:identifier>
    <dc:language>en</dc:language>
    <meta name="cover" content="cover-image" />
  </metadata>
  <manifest>
    <item id="document" href="document.html" media-type="application/xhtml+xml" />
    <item id="ncx" href="toc.ncx" media-type="application/x-dtbncx+xml" />
  </manifest>
  <spine toc="ncx">
    <itemref idref="document" linear="yes" />
  </spine>
</package>
""".lstrip())


TOCFILE = string.Template("""
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE ncx PUBLIC "-//NISO//DTD ncx 2005-1//EN" "http://www.daisy.org/z3986/2005/ncx-2005-1.dtd">
<ncx version="2005-1" xmlns="http://www.daisy.org/z3986/2005/ncx/">
  <head>
    <meta name="dtb:uid" content="${ID}" />
    <meta name="epub-creator" content="${SOFTWARE}" />
    <meta name="dtb:depth" content="1" />
    <meta name="dtb:totalPageCount" content="0" />
    <meta name="dtb:maxPageNumber" content="0" />
  </head>
  <docTitle>
    <text>${TITLE}</text>
  </docTitle>
  <docAuthor>
    <text>${AUTHOR}</text>
  </docAuthor>
  <navMap>
    <navPoint id="navpoint-1" playOrder="1">
      <navLabel>
        <text>${TITLE}</text>
      </navLabel>
      <content src="document.html" />
    </navPoint>
  </navMap>
</ncx>
""".lstrip())


class EpubBuilder:
    """Builds an Epub out of an HTML file."""

    def __init__(self, all_arguments):
        """Create a new EpubBuilder from the given command line argumets."""
        self.software = all_arguments[0]
        self.tidy = True
        self.data = {
            'AUTHOR': "Unknown",
            'DATE': datetime.date.today().isoformat()[:10],
            'SOFTWARE': self.software,
            'ID': str(uuid.uuid4()),
        }
        arguments = self.parsecli(all_arguments[1:])
        if len(arguments) < 2:
            sys.stderr.write("Insufficient Args\n")
            sys.stderr.write(USAGE)
            sys.exit(1)
        self.infile_name = arguments[0]
        self.outfile_name = arguments[1]
        if 'TITLE' not in self.data:
            self.data['TITLE'] = self.outfile_name[:-5]

    def parsecli(self, all_arguments):
        """Takes all the arguments, and separtes into options and arguments."""
        remaining = []
        arguments = iter(all_arguments)
        for argument in arguments:
            if argument == "--title":
                self.data['TITLE'] = arguments.next()
            elif argument == "--author":
                self.data['AUTHOR'] = arguments.next()
            elif argument == "--date":
                self.data['DATE'] = arguments.next()
            elif argument == "--tidy":
                self.tidy = True
            elif argument == "--notidy":
                self.tidy = False
            else:
                remaining.append(argument)
        return remaining

    def clean(self, document):
        """Take a document and cleans it into valid XHTML."""
        tidier = subprocess.Popen(['tidy', '-quiet', '-asxhtml', '-utf8'],
                    stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        stdout, stderr = tidier.communicate(document)
        return stdout

    def optionally_clean(self, document):
        """Take a document and cleans it into valid XHTML only if desired."""
        return self.clean(document) if self.tidy else document

    def detect_encoding(self, document):
        """Take a document and return its character encoding."""
        detector = subprocess.Popen(['file', '--mime-encoding', '--brief', '-' ],
                    stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        stdout, stderr = detector.communicate(document)
        return stdout.strip()

    def build(self):
        """Build the Epub file."""
        document = open(self.infile_name).read()
        encoding = self.detect_encoding(document)
        assert encoding in ("utf-8", "us-ascii"), encoding
        document = self.optionally_clean(document)
        with zipfile.ZipFile(self.outfile_name, "w") as z:
            # Must be first, no end-of-line:
            z.writestr("mimetype", "application/epub+zip")
            # Now all the rest:
            z.writestr("META-INF/container.xml", CONTAINER.substitute(self.data))
            z.writestr("metadata.opf", METAFILE.substitute(self.data))
            z.writestr("toc.ncx", TOCFILE.substitute(self.data))
            z.writestr("document.html", document)


def main():
    """Main program routine."""
    builder = EpubBuilder(sys.argv)
    builder.build()


if __name__ == '__main__':
    main()


