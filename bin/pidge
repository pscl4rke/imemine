#!/usr/bin/python3


# Note: We use email.Message here for Python 3.5 compatibility,
# but when that is dropped we may choose to use emai.EmailMessage
# instead which comes with Python 3.6 onwards.


import configparser
import email
from email import policy
import sys

import logging
LOG = logging.getLogger("pidge")


COULD_NOT_CATEGORISE = 16 # exit code


class HeaderMatcher:

    def __init__(self, header_names, hunted_value):
        self.header_names = header_names
        self.hunted_value = hunted_value

    def __str__(self):
        return "{%r in %s}" % (self.hunted_value, self.header_names)

    def matches(self, message):
        for header_name in self.header_names:
            if self.hunted_value.lower() in message.get(header_name, "").lower():
                LOG.info("Match found")
                return True
        return False


class Category:

    def __init__(self, destination_folder, matchers):
        self.destination_folder = destination_folder
        if len(matchers) == 0:
            # In theory this could be because it's a catch-all rule, but it's
            # much more likely to be a configuration mistake!
            raise Exception("No matchers to file into %s" % destination_folder)
        self.matchers = matchers

    def __str__(self):
        return "{Categorise into %s with %i matchers}" % \
            (self.destination_folder, len(self.matchers))

    @classmethod
    def from_section(cls, section_name, key_values):
        matchers = []
        if "match_to" in key_values:
            matchers.append(HeaderMatcher(["To"], key_values["match_to"]))
        if "match_from" in key_values:
            matchers.append(HeaderMatcher(["From"], key_values["match_from"]))
        if "match_between" in key_values:
            matchers.append(HeaderMatcher(["From", "To", "Cc"], key_values["match_between"]))
        if "match_subject" in key_values:
            matchers.append(HeaderMatcher(["Subject"], key_values["match_subject"]))
        if "match_id" in key_values:
            matchers.append(HeaderMatcher(["Message-Id"], key_values["match_id"]))
        if "match_mailer" in key_values:
            matchers.append(HeaderMatcher(["X-Mailer"], key_values["match_mailer"]))
        return cls(key_values["file_into"], matchers)

    def matches(self, message):
        # Must match all of them:
        for matcher in self.matchers:
            LOG.debug("Considering matcher %s" % matcher)
            if not matcher.matches(message):
                return False
        return True


class Categoriser:

    def __init__(self, configpath):
        self.categories = []
        config = configparser.ConfigParser()
        with open(configpath) as srcfile: # errors if missing
            config.read_file(srcfile)
        for section_name in config.sections():
            LOG.debug("Loading rule in %r section" % section_name)
            self.categories.append(
                Category.from_section(section_name, config[section_name]))

    def categorise(self, message):
        for category in self.categories:
            LOG.info("Considering rule %s" % category)
            if category.matches(message):
                return category
        LOG.info("No rules matched")
        return None


def main():
    config_path, message_path = sys.argv[1], sys.argv[2]
    #logging.basicConfig(level=logging.DEBUG)
    logging.basicConfig(level=logging.WARN)
    with open(message_path, "rb") as message_file:
        message = email.message_from_binary_file(message_file, policy=policy.default)
    category = Categoriser(config_path).categorise(message)
    if category is None:
        sys.stderr.write("No matches\n")
        sys.exit(COULD_NOT_CATEGORISE)
    else:
        print(category.destination_folder)
        sys.exit(0)


if __name__ == '__main__':
    main()
