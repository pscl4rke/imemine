#!/usr/bin/python3


# Note: We use email.Message here for Python 3.5 compatibility,
# but when that is dropped we may choose to use emai.EmailMessage
# instead which comes with Python 3.6 onwards.


import configparser
import email
from email import policy
import sys


COULD_NOT_CATEGORISE = 16 # exit code


class HeaderMatcher:

    def __init__(self, header_names, hunted_value):
        self.header_names = header_names
        self.hunted_value = hunted_value

    def matches(self, message):
        for header_name in self.header_names:
            if self.hunted_value in message.get(header_name, ""):
                return True
        return False


class Category:

    def __init__(self, name, matchers):
        self.name = name
        self.matchers = matchers

    @classmethod
    def from_section(cls, name, key_values):
        matchers = []
        if "match_to" in key_values:
            matchers.append(HeaderMatcher(["To"], key_values["match_to"]))
        if "match_subject" in key_values:
            matchers.append(HeaderMatcher(["Subject"], key_values["match_subject"]))
        return cls(key_values["file_into"], matchers)

    def matches(self, message):
        # Must match all of them:
        for matcher in self.matchers:
            if not matcher.matches(message):
                return False
        return True


class Categoriser:

    def __init__(self, configpath):
        self.categories = []
        config = configparser.ConfigParser()
        with open(configpath) as srcfile: # errors if missing
            config.read_file(srcfile)
        for section_name in config.sections():
            self.categories.append(
                Category.from_section(section_name, config[section_name]))

    def categorise(self, message):
        for category in self.categories:
            if category.matches(message):
                return category
        return None


def main():
    config_path, message_path = sys.argv[1], sys.argv[2]
    with open(message_path, "rb") as message_file:
        message = email.message_from_binary_file(message_file, policy=policy.default)
    category = Categoriser(config_path).categorise(message)
    if category is None:
        sys.stderr.write("No matches\n")
        sys.exit(COULD_NOT_CATEGORISE)
    else:
        print(category.name)
        sys.exit(0)


if __name__ == '__main__':
    main()
