#!/usr/bin/python3


# Note: We use email.Message here for Python 3.5 compatibility,
# but when that is dropped we may choose to use emai.EmailMessage
# instead which comes with Python 3.6 onwards.


import configparser
import email
from email import policy
import sys


COULD_NOT_CATEGORISE = 16 # exit code


class Category:

    def __init__(self, name, match_to):
        self.name = name
        self.match_to = match_to

    def matches(self, message):
        if self.match_to in message.get("To", ""):
            return True
        return False


class Categoriser:

    def __init__(self, configpath):
        self.categories = []
        config = configparser.ConfigParser()
        with open(configpath) as srcfile: # errors if missing
            config.read_file(srcfile)
        for section_name in config.sections():
            self.categories.append(Category(config[section_name]["file_into"],
                                            config[section_name]["match_to"]))

    def categorise(self, message):
        for category in self.categories:
            if category.matches(message):
                return category
        return None


def main():
    config_path, message_path = sys.argv[1], sys.argv[2]
    with open(message_path, "rb") as message_file:
        message = email.message_from_binary_file(message_file, policy=policy.default)
    category = Categoriser(config_path).categorise(message)
    if category is None:
        sys.stderr.write("No matches\n")
        sys.exit(COULD_NOT_CATEGORISE)
    else:
        print(category.name)
        sys.exit(0)


if __name__ == '__main__':
    main()
