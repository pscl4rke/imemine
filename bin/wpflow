#!/usr/bin/python3
#======================================================================#
# REFLOW PARAGRAPHS FOR WORDPRESS                (c) 2015 P. S. Clarke #
#======================================================================#


# FIXME: doesn't reflow block quotes properly
# FIXME: leaves a space on the end of paragraphs


import sys
import unittest


def flowform(line):
    if line.strip().startswith("%"): # comment
        return ""
    if line.strip() == "": # blank
        return "\n\n"
    if line[0] in "\n\t\r >":
        return line
    if line[0] == '[' and ']:' in line: # or '](' not in line
        return line
    return line.replace('\n', ' ')


def wpflow(src):
    chunks = []
    for line in src.splitlines():
        chunks.append(flowform(line + "\n"))
        chunks.append("")
    return "".join(chunks)


class TestWpflow(unittest.TestCase):

    def test_paragraphs(self):
        text_in = "foo\nbar\n\nbaz\nquux\n"
        #text_out = "foo bar\n\nbaz quux\n"
        text_out = "foo bar \n\nbaz quux "  # FIXME
        self.assertEqual(text_out, wpflow(text_in))

    def test_code(self):
        text_in = "    foo\n    bar\n"
        text_out = "    foo\n    bar\n"
        self.assertEqual(text_out, wpflow(text_in))

    def test_blockquotes(self):
        text_in = "> foo\n> bar\n"
        #text_out = "> foo bar\n"
        text_out = "> foo\n> bar\n"  # FIXME
        self.assertEqual(text_out, wpflow(text_in))

    def test_bullets(self):
        text_in = "* foo\nbar\n"
        #text_out = "* foo bar"
        text_out = "* foo bar "  # FIXME
        self.assertEqual(text_out, wpflow(text_in))


if __name__ == '__main__':
    if "--test" in sys.argv:
        sys.argv = [sys.argv[0]]
        unittest.main()
    else:
        sys.stdout.write(wpflow(sys.stdin.read()))
