#!/usr/bin/python3
#======================================================================#
# REFLOW PARAGRAPHS FOR WORDPRESS           (c) 2015,2019 P. S. Clarke #
#======================================================================#


import sys
import unittest


def reflow(paragraph):
    preformatted = paragraph[0][0] in " \t"
    if preformatted:
        return reflow_reformatted(paragraph)
    blockquote = paragraph[0][0] in ">"
    bullet = paragraph[0][0] in "*-"
    chunks = []
    if blockquote:
        chunks.append(">")
    first = True
    for line in paragraph:
        if line.strip().startswith("%"): # comment
            continue
        if blockquote:
            stripped = line.lstrip("> \t")
            if stripped == "":
                stripped = "\n>\n>"
            chunks.append(" " + stripped)
        elif bullet:
            #stripped = line.lstrip("*- \t")
            if line[0] in "*-":
                chunks.append("\n" + line)
            else:
                chunks.append(" " + line)
        else:
            if not first:
                chunks.append(" ")
            chunks.append(line)
        first = False
    return ("".join(chunks) + "\n").lstrip("\n")


def reflow_reformatted(paragraph):
    return "\n".join(paragraph) + "\n"


def split_into_paragraphs(lines):
    paragraphs = []
    current_paragraph = []
    currently_whitespace = True
    for line in lines:
        if line.strip() == "":
            if not currently_whitespace:
                paragraphs.append(current_paragraph)
                current_paragraph = []
            currently_whitespace = True
        else:
            current_paragraph.append(line)
            currently_whitespace = False
    if len(current_paragraph) > 0:
        paragraphs.append(current_paragraph)
    return paragraphs


def wpflow(src):
    pars = []
    for paragraph in split_into_paragraphs(src.splitlines()):
        pars.append(reflow(paragraph))
    return "\n".join(pars)


class TestWpflow(unittest.TestCase):

    def test_comments(self):
        text_in = "foo\n%bar\nbaz\n"
        text_out = "foo baz\n"
        self.assertEqual(text_out, wpflow(text_in))

    def test_paragraphs(self):
        text_in = "foo\nbar\n\nbaz\nquux\n"
        text_out = "foo bar\n\nbaz quux\n"
        self.assertEqual(text_out, wpflow(text_in))

    def test_code(self):
        text_in = "    foo\n    bar\n"
        text_out = "    foo\n    bar\n"
        self.assertEqual(text_out, wpflow(text_in))

    def test_blockquotes(self):
        text_in = "> foo\n> bar\n"
        text_out = "> foo bar\n"
        self.assertEqual(text_out, wpflow(text_in))

    def test_multiline_blockquotes(self):
        text_in = "> foo\n>\n> bar\n"
        #text_out = "> foo\n>\n> bar\n"
        text_out = "> foo \n>\n> bar\n"  # FIXME
        self.assertEqual(text_out, wpflow(text_in))

    def test_bullets(self):
        text_in = "* foo\nbar\n"
        text_out = "* foo bar\n"
        self.assertEqual(text_out, wpflow(text_in))

    def test_multiple_bullets(self):
        text_in = "* foo\n* bar\n"
        text_out = "* foo\n* bar\n"
        self.assertEqual(text_out, wpflow(text_in))

    def test_multiple_multiline_bullets(self):
        text_in = "* foo\nbar\n* baz\n"
        text_out = "* foo bar\n* baz\n"
        self.assertEqual(text_out, wpflow(text_in))


if __name__ == '__main__':
    if "--test" in sys.argv:
        sys.argv = [sys.argv[0]]
        unittest.main()
    else:
        sys.stdout.write(wpflow(sys.stdin.read()))
