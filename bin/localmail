#!/usr/bin/python3
#======================================================================#
# LOCALMAIL EMAIL MANAGEMENT SHELL               (c) 2018 P. S. Clarke #
#======================================================================#

# FIXME - how to actually block running a command instead of just
#   hiding the number in the menu?


"""
Easiest way is to use this as the interpreter in the hashbang of
your config file:

    #!/path/to/localmail
    # vim:ft=dosini:

    [envvars]
    FOO = An environment variable
    BAR = /another/one

    [sync]
    ; either...
    offlineimaprc = /path/to/offlineimap_config_file
    executable = /optional/path/to/offlineimap
    ; ...or...
    mbsyncrc = /path/to/mbsyncrc_config_file

    [manage]
    muttrc = /path/to/mutt_config_file
    readonly = false

    [search]
    muhome = /path/to/indexing/dir
    maildir = /path/to/email/folders
    ; NOTE: don't put results into base directory or it will get synced!
    linksdir = /path/to/results/folder

    [gitrepo]
    path = /path/to/git/repo
"""


import configparser
import os
import subprocess
from subprocess import run
import sys
import time

import readline
assert readline


class LocalMail:

    def __init__(self):
        self.config = configparser.ConfigParser()

    def main(self):
        config_path = sys.argv[1]
        self.config.read(config_path)
        self.load_environment()
        self.keep_prompting()

    def has_config_for(self, section):
        return section in self.config

    def load_environment(self):
        if self.has_config_for("envvars"):
            for key in self.config["envvars"]:
                key = key.upper()  # stupid helpful configparser
                os.environ[key] = self.config["envvars"][key]  # inherited by subprocs

    def set_title(self):
        title = "Localmail: %s" % os.path.basename(sys.argv[1])
        print("\033]0;%s\007" % title, end="")

    def keep_prompting(self):
        while True:
            self.set_title() # esp after mutt has tweaked it
            self.display_options()
            cmd = self.ask_for_command()
            try:
                self.handle(cmd)
            except KeyboardInterrupt:
                print()  # force new line
            except SystemExit:
                break
            except Exception as exc:
                print(repr(exc))

    def display_options(self):
        if self.has_config_for("sync"):
            print("1: sync")
            #print("1*: sync forever")
        print("2: manage-ro")
        if self.config.getboolean("manage", "readonly", fallback=True) is False:
            print("3: manage-rw")
        if self.has_config_for("search"):
            print("4: search")
        if self.has_config_for("gitrepo"):
            print("5: commit")

    def ask_for_command(self):
        try:
            return input("#? ")
        except EOFError:
            return "q"
        except KeyboardInterrupt:
            return "q"

    def handle(self, cmd):
        if cmd == "1":
            self.handle_sync()
        elif cmd == "1*":
            while True:
                self.handle_sync()
                time.sleep(20)
        elif cmd == "2":
            self.handle_manage_ro()
        elif cmd == "3":
            self.handle_manage_rw()
        elif cmd == "4":
            self.handle_search()
        elif cmd == "5":
            self.handle_commit()
        elif cmd == "q":
            print("Exiting...")
            raise SystemExit()
        else:
            print("Huh??")

    def handle_sync(self):
        if self.has_config_for("gitrepo"):  # ensure up-to-date first
            basedir = self.config["gitrepo"]["path"]
            subprocess.call(["git", "pull"], cwd=basedir)
        if "offlineimaprc" in self.config["sync"]:
            offlineimapbin = self.config['sync'].get("executable", "offlineimap")
            offlineimaprc = self.config['sync']['offlineimaprc']
            subprocess.call([offlineimapbin, "-c", offlineimaprc])
        if "mbsyncrc" in self.config["sync"]:
            mbsyncrc = self.config['sync']['mbsyncrc']
            subprocess.call(["mbsync", "-c", mbsyncrc, "-a"])

    def handle_manage_ro(self):
        muttrc = self.config['manage']['muttrc']
        subprocess.call(["mutt", "-R", "-F", muttrc])

    def handle_manage_rw(self):
        muttrc = self.config['manage']['muttrc']
        subprocess.call(["mutt", "-F", muttrc])

    def handle_search(self):
        # Warning - what if this checks the index into version control!
        # Warning - what if this syncs the results onto the remote server!
        # Note - this has been updated for mu version mu 1.3.8 (index -> init)
        muhome = self.config['search']['muhome']
        maildir = self.config['search']['maildir']
        linksdir = self.config['search']['linksdir']
        if not os.path.exists(muhome):
            run(["mu", "init", "--muhome", muhome, "-m", maildir], check=True)
        run(["mu", "index", "--muhome", muhome], check=True)
        query = input("Query: ")
        cmd = ["mu", "find", "--muhome", muhome, "-u", "--format", "links", "--linksdir", linksdir, "--clearlinks"]
        cmd.extend(query.split())
        run(cmd, check=True)
        muttrc = self.config['manage']['muttrc']
        run(["mutt", "-R", "-F", muttrc, "-f", linksdir])

    def handle_commit(self):
        basedir = self.config['gitrepo']['path']
        subprocess.call(["git", "add", "-A"], cwd=basedir)
        subprocess.call(["git", "commit", "-m", "Manual"], cwd=basedir)
        subprocess.call(["git", "push"], cwd=basedir)


if __name__ == '__main__':
    LocalMail().main()
