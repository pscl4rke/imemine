#!/usr/bin/python3


import argparse
from contextlib import contextmanager
import os
import subprocess
import sys
import tempfile


def info(msg):
    sys.stderr.write("[spush] %s\n" % msg)
    sys.stderr.flush()


@contextmanager
def SshTunnel(host_id):
    with tempfile.TemporaryDirectory() as dirpath:
        control_socket = os.path.join(dirpath, "ssh-control")
        info("Connecting to %s over SSH..." % host_id)
        port_to_try = 1234
        subprocess.check_call([
            "ssh", host_id, "-N", "-f",
            "-L%i:localhost:5000" % port_to_try,
            "-o", "ExitOnForwardFailure=yes",
            "-o", "ControlMaster=yes",
            "-o", "ControlPath=%s" % control_socket,
        ])
        try:
            yield port_to_try
        finally:
            info("Tearing down SSH connection...")
            subprocess.check_call([
                "ssh", host_id, "-q",
                "-o", "ControlPath=%s" % control_socket,
                "-O", "exit",
            ])


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("source")
    parser.add_argument("destination") # e.g. spushtest@vtest
    parser.add_argument("-c", "--creds", default="username:password")
    return parser.parse_args()


def main():
    args = parse_args()
    if ":" not in args.source:
        raise Exception("Need a tag or digest for skopeo")
    exitcode = 1
    with SshTunnel(args.destination) as port_number:
        #subprocess.check_call(["curl", "-v", "http://%s:%s@localhost:%i/v2/_catalog" % 
        #    (username, password, port_number)])
        args = [
            "skopeo", "--insecure-policy", "copy",
            "--dest-tls-verify=false",
            "--dest-creds=%s" % args.creds,
            "docker-daemon:%s" % args.source,
            "docker://localhost:%i/%s" % (port_number, args.source),
        ]
        info("Running skopeo...")
        #print(args)
        exitcode = subprocess.run(args).returncode
    if exitcode == 0:
        info("All done.")
    else:
        info("Error occurred.")
    sys.exit(exitcode)


if __name__ == '__main__':
    main()
