#!/usr/bin/python3


# So the idea of this is that you can pipe jounalctl's json output
# into it and it will display the records in a more digestable fashion.


import argparse
import datetime
import json
import pprint
import sys


PRIORITIES = ["EMERGENCY", "ALERT", "CRITICAL", "ERROR",
              "WARNING", "NOTICE", "INFO", "DEBUG",
              "UNKNOWN"]


def documents_in(text):  # streaming concatenated docs
    decoder = json.JSONDecoder()
    while text:
        if text[0].isspace():
            text = text[1:]
        else:
            try:
                doc, index = decoder.raw_decode(text)
                text = text[index:]
                yield doc
            except json.decoder.JSONDecodeError:
                return  # assume stream was truncated early


def header(document):
    level = PRIORITIES[int(document.get("PRIORITY", 8))]
    ts = float(document.get("__REALTIME_TIMESTAMP", 0)) / 1000000
    dt = datetime.datetime.utcfromtimestamp(ts)
    unit = document.get("_SYSTEMD_UNIT", ":unknown:")
    return "%s [%s] %s" % (level, dt.strftime("%H:%M:%S"), unit)


def prettify(document):
    lines = []
    message = document.get("MESSAGE", "::message missing::")
    if message == None:
        message = "::message null::"
    try:  # if message is json itself (e.g. structlog) then prettify
        data = json.loads(message)
        message = pprint.pformat(data)
    except Exception:
        pass
    for msgline in message.splitlines():
        lines.append(" | %s" % msgline.rstrip())
    return "".join(line + "\n" for line in lines)


def parse_args(arguments):
    parser = argparse.ArgumentParser()
    parser.add_argument("--colour", default="auto",
                        choices=["never", "auto", "always"])
    return parser.parse_args(arguments)


def main():
    options = parse_args(sys.argv[1:])
    use_colour = (options.colour == "always") or \
                 (options.colour == "auto" and sys.stdout.isatty())
    rawtext = sys.stdin.read()
    last_header = ""
    for document in documents_in(rawtext):
        this_header = header(document)
        if this_header != last_header:
            print()
            if use_colour:
                print("\x1b[34m" + this_header + "\x1b[0m")
            else:
                print(this_header)
            last_header = this_header
        print(prettify(document).rstrip())


if __name__ == '__main__':
    main()
