#!/usr/bin/python3
#======================================================================#
# MERGE ASPELL                                   (c) 2019 P. S. Clarke #
#======================================================================#

# For more information read gitattributes(5), especially the Custom
# Merge Driver section.

# See also `normalise-aspell`.

# Note that the latest versions of aspell do actually sort their output,
# albeit by putting all the capitals first.  This may well mean that my
# script is pretty much valueless.  Although it is possible that there
# may still be some value in merging them with this file.


import sys


def sort_key(word):
    # first sort case insensitively, then consistently
    return (word.lower(), word.encode("ascii", "xmlcharrefreplace"))


class WordList:

    def __init__(self, version, lang):
        self.version = version
        self.lang = lang
        self.words = set()

    def read_from(self, srcpath):
        with open(srcpath, "rb") as srcfile:
            lines = iter(srcfile)
            header = next(lines).split(b" ")
            if header[0] != self.version:
                raise Exception("Version mismatch!")
            if header[1] != self.lang:
                raise Exception("Language mismatch!")
            if header[3] != b"\n":
                raise Exception("Missing trailing space!")
            to_add = []
            for line in lines:
                to_add.append(line.rstrip(b"\n"))
            if len(to_add) != int(header[2]):
                raise Exception("%r != %r" % (len(to_add), int(header[2])))
        self.words.update(to_add)

    def write_to(self, destpath):
        with open(destpath, "wb") as destfile:
            destfile.write(b"%s %s %i \n" % (self.version, self.lang, len(self.words)))
            for word in sorted(self.words, key=sort_key):
                destfile.write(b"%s\n" % word)


def main():
    executable, ancestor, currentanddest, otherbranch = sys.argv
    wordlist = WordList(b"personal_ws-1.1", b"en")
    wordlist.read_from(currentanddest)
    wordlist.read_from(otherbranch)
    wordlist.write_to(currentanddest)


if __name__ == '__main__':
    main()
