#!/usr/bin/python3


import configparser
import os
import subprocess
import sys


BIN_DIR = "/home/psc/bin"


class Entry:

    def __init__(self, name, options):
        self.name = name
        self.requirement = options.get('requirement', name)

    def venv_dir(self):
        return "/home/psc/.pip2bin/%s" % self.name


class Pip2bin:

    def run(self):
        config = configparser.ConfigParser()
        config.read([sys.argv[1]])
        for section_name in config.sections():
            entry = Entry(section_name, dict(config.items(section_name)))
            self.ensure_downloaded(entry)
            self.ensure_linked(entry)

    def ensure_downloaded(self, entry):
        venv_dir = entry.venv_dir()
        if os.path.exists(venv_dir):
            return # FIXME: What if the requirements have changed? Redownload?
        self._exec("/usr/bin/python3", "-m", "venv", venv_dir)
        self._exec("%s/bin/pip" % venv_dir, "install", "--upgrade", "pip") # fix errors
        self._exec("%s/bin/pip" % venv_dir, "install", entry.requirement)

    def ensure_linked(self, entry):
        target = os.path.join(entry.venv_dir(), "bin", entry.name)
        if not os.path.exists(target):
            raise Exception("No such executable: %r" % target)
        destination = os.path.join(BIN_DIR, entry.name)
        if os.path.exists(destination) and os.readlink(destination) == target:
            return
        self._exec("ln", "-f", "-s", target, destination) # NB: Forcing!

    def _exec(self, *args):
        subprocess.run(args, check=True)


if __name__ == '__main__':
    Pip2bin().run()
