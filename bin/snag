#!/usr/bin/python3
#======================================================================#
# REMOTE FILE SNAGGER                  (c) 2017,2021,2024 P. S. Clarke #
#======================================================================#


import argparse
import os
import random
import shlex
import subprocess
import sys


def random_code(length):
    chars = "0123456789abcdefghijklmnopqrstuvwxyz"
    return "".join(random.choice(chars) for i in range(length))


def subst(template, context):
    for key, value in context.items():
        template = template.replace("[snag:%s]" % key, value)
    return template


class ConfigError(RuntimeError):
    pass


class DummySource:

    def set_up(self):
        pass

    def tear_down(self):
        pass

    def pull(self, shell_cmd):
        raise ConfigError("Unconfigured '!using' source")


class GenericSource:

    def __init__(self, prefix_args):
        self.prefix_args = prefix_args

    def set_up(self):
        pass

    def tear_down(self):
        pass

    def pull(self, shell_cmd):
        args = list(self.prefix_args)
        args.append(shell_cmd)
        return subprocess.check_output(args)


class SshSource:

    def __init__(self, prefix_args):
        self.prefix_args = prefix_args
        if ("-t" in prefix_args) or ("-tt" in prefix_args):
            # because the default advice for sudo over ssh is to pass -t option
            self.info("NOTE: Snag and PseudoTTYs play badly together!")
            self.info("  Any terminal interaction prompts etc will get mixed")
            self.info("  into the same bytestream as the command output and")
            self.info("  will be hidden from you the user.")
        self.socket = "./snag.%s.sock" % random_code(8)

    def info(self, message):
        sys.stdout.write("%s\n" % message)
        sys.stdout.flush()

    def set_up(self):
        self.info("Launching the control master on %s..." % self.socket)
        args = ["ssh", "-o", "ControlPath=%s" % self.socket,
                       "-o", "ControlMaster=yes",
                       "-o", "ControlPersist=yes"]
        args.extend(self.prefix_args)
        args.append("true")
        subprocess.check_call(args)

    def tear_down(self):
        self.info("Shutting down the control master...")
        args = ["ssh", "-o", "ControlPath=%s" % self.socket]
        args.extend(self.prefix_args)
        args.extend(["-O", "exit"])
        subprocess.check_call(args)

    def pull(self, shell_cmd):
        args = ["ssh", "-o", "ControlPath=%s" % self.socket]
        args.extend(self.prefix_args)
        args.append(shell_cmd)
        return subprocess.check_output(args)


class PostProcessor:

    def __init__(self, shell):
        self.shell = shell

    def filter(self, original):
        p = subprocess.Popen(self.shell, shell=True,
                stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        stdout, _ = p.communicate(original)
        p.wait()
        if p.poll() != 0:
            raise subprocess.CalledProcessError(self.shell)
        return stdout


def argument_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("snagfile")
    return parser


class Snagger:

    def __init__(self):
        self.destdir = "."

    def info(self, message):
        sys.stdout.write("%s\n" % message)
        sys.stdout.flush()

    def warning(self, message):
        sys.stdout.write("[WARNING] %s\n" % message)
        sys.stdout.flush()

    def error(self, message):
        sys.stdout.write("[ERROR] %s\n" % message)
        sys.stdout.flush()

    def main(self, arguments):
        args = argument_parser().parse_args(sys.argv[1:])
        try:
            self.main_or_error(args)
        except ConfigError as exc:
            self.error(str(exc))
            sys.exit(1)

    def main_or_error(self, args):
        self.context = {}
        self.postprocessors = {}
        self.current_source = DummySource()
        self.current_source.set_up()
        try:
            self.pull_according_to(args.snagfile)
        finally:
            self.current_source.tear_down()

    def pull_according_to(self, filename):
        for line in open(filename):
            self.handle_line(subst(line.strip(), self.context))

    def handle_line(self, line):
        if line == "":
            return
        if line.startswith("#"):
            return
        if line.startswith("!destdir "):
            self.destdir = line[9:]
            if not os.path.isdir(self.destdir):
                self.error("No such destination directory: %r" % self.destdir)
                sys.exit(1)
            return
        if line.startswith("!export "):
            envvar, value = line[8:].split(None, 1)
            os.environ[envvar] = value
            return
        if line.startswith("!using "):
            self.current_source.tear_down()
            self.current_source = GenericSource(shlex.split(line[7:]))
            self.current_source.set_up()
            return
        if line.startswith("!using-ssh "):
            self.current_source.tear_down()
            self.current_source = SshSource(shlex.split(line[11:]))
            self.current_source.set_up()
            return
        if line.startswith("!postprocessor "):
            name, shell = line[15:].split(None, 1)
            self.postprocessors[name] = PostProcessor(shell)
            return
        if line.startswith("!run "):
            self.run(line[5:])
            return
        if "\t" in line:
            dest_and_pps, _tab, shell_cmd = line.strip().partition("\t")
            parts = [part.strip() for part in dest_and_pps.split("<")]
            destination = parts.pop(0)
            postprocessors = []
            for part in reversed(parts):
                if part not in self.postprocessors:
                    self.warning("Unknown postprocessor: %r" % part)
                    return
                postprocessors.append(self.postprocessors[part])
            self.pull_and_write(shell_cmd, postprocessors, destination)
            return
        self.warning("Unknown line: %r" % line)

    def run(self, shell_cmd):
        self.info("Running %r..." % shell_cmd)
        try:
            subprocess.check_call(shell_cmd, shell=True)
        except subprocess.CalledProcessError as exc:
            # Let's warn but continue after errors.
            # If I add an "!assert" command we can stop and exit
            self.warning("Running failed with exit code %r" % exc.returncode)
            self.warning("Command: %r" % exc.cmd)

    def pull_and_write(self, shell_cmd, postprocessors, destname):
        destination = os.path.join(self.destdir, destname)  # handles absolute
        try:
            self.info("Snagging %s..." % destination)
            output = self.current_source.pull(shell_cmd)
            for postprocessor in postprocessors:
                output = postprocessor.filter(output)
            # Note that we only overwrite the file if the cmd worked
            with open(destination, "wb") as destfile:
                destfile.write(output)
        except subprocess.CalledProcessError as exc:
            # Note that filters can throw errors too
            self.warning("Running %s failed with exit code %r" %
                         (exc.cmd[0], exc.returncode))
            self.warning("Command: %r" % exc.cmd)
            if exc.stdout is not None:
                for line in exc.stdout.splitlines():
                    self.warning("Stdout: %r" % line)
            if exc.stderr is not None:
                for line in exc.stderr.splitlines():
                    self.warning("Stderr: %r" % line)


if __name__ == '__main__':
    Snagger().main(sys.argv)
