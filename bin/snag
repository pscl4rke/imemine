#!/usr/bin/python3
#======================================================================#
# REMOTE FILE SNAGGER                            (c) 2017 P. S. Clarke #
#======================================================================#


import random
import shlex
import subprocess
import sys


def random_code(length):
    chars = "0123456789abcdefghijklmnopqrstuvwxyz"
    return "".join(random.choice(chars) for i in range(length))


class DummySource:

    def set_up(self):
        pass

    def tear_down(self):
        pass

    def pull(self, destination, shell_cmd):
        raise NotImplementedError("Unconfigured 'using' source")


class GenericSource:

    def __init__(self, prefix_args):
        self.prefix_args = prefix_args

    def set_up(self):
        pass

    def tear_down(self):
        pass

    def pull(self, destination, shell_cmd):
        args = list(self.prefix_args)
        args.append(shell_cmd)
        output = subprocess.check_output(args)
        # Note that we only overwrite the file if the cmd worked
        with open(destination, "wb") as destfile:
            destfile.write(output)


class SshSource:

    def __init__(self, prefix_args):
        self.prefix_args = prefix_args
        self.socket = "./snag.%s.sock" % random_code(8)

    def info(self, message):
        sys.stdout.write("%s\n" % message)
        sys.stdout.flush()

    def set_up(self):
        self.info("Launching the control master on %s..." % self.socket)
        args = ["ssh", "-o", "ControlPath=%s" % self.socket,
                       "-o", "ControlMaster=yes",
                       "-o", "ControlPersist=yes"]
        args.extend(self.prefix_args)
        args.append("true")
        subprocess.check_call(args)

    def tear_down(self):
        self.info("Shutting down the control master...")
        args = ["ssh", "-o", "ControlPath=%s" % self.socket]
        args.extend(self.prefix_args)
        args.extend(["-O", "exit"])
        subprocess.check_call(args)

    def pull(self, destination, shell_cmd):
        args = ["ssh", "-o", "ControlPath=%s" % self.socket]
        args.extend(self.prefix_args)
        args.append(shell_cmd)
        output = subprocess.check_output(args)
        # Note that we only overwrite the file if the cmd worked
        with open(destination, "wb") as destfile:
            destfile.write(output)


class Snagger:

    def info(self, message):
        sys.stdout.write("%s\n" % message)
        sys.stdout.flush()

    def main(self, arguments):
        if len(arguments) != 2:
            self.info("Usage error")
            sys.exit(1)
        filename = arguments[1]
        self.current_source = DummySource()
        self.current_source.set_up()
        try:
            self.pull_according_to(filename)
        finally:
            self.current_source.tear_down()

    def pull_according_to(self, filename):
        for line in open(filename):
            self.handle_line(line.strip())

    def handle_line(self, line):
        if line == "":
            return
        if line.startswith("#"):
            return
        if line.startswith("!using "):
            self.current_source.tear_down()
            self.current_source = GenericSource(shlex.split(line[7:]))
            self.current_source.set_up()
            return
        if line.startswith("!using-ssh "):
            self.current_source.tear_down()
            self.current_source = SshSource(shlex.split(line[11:]))
            self.current_source.set_up()
            return
        if line.startswith("!run "):
            self.run(line[5:])
            return
        if "\t" in line:
            destination, _tab, shell_cmd = line.strip().partition("\t")
            self.pull(destination, shell_cmd)
            return
        self.info("Unknown line: %r" % line)

    def run(self, shell_cmd):
        self.info("Running %r..." % shell_cmd)
        subprocess.check_call(shell_cmd, shell=True)

    def pull(self, destination, shell_cmd):
        try:
            self.info("Snagging %s..." % destination)
            self.current_source.pull(destination, shell_cmd)
        except subprocess.CalledProcessError:
            self.info("ERROR")


if __name__ == '__main__':
    Snagger().main(sys.argv)
